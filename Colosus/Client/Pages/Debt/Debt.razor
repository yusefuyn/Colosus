@page "/Customer/Debt/{CustomerPublicKey}"
@using Colosus.Client.Components
@using Colosus.Client.Pages.Debt
@using Colosus.Client.Services.Customer
@using Colosus.Entity.Concretes
@using Colosus.Entity.Concretes.DatabaseModel
@using Colosus.Operations.Abstracts
@inject ICustomerService customerService
@inject IDataConverter dataConverter
<div class="container">
    <div class="container-header">
        <h3>@debts.CustomerName Cari Hesabı</h3>
    </div>
    <div class="row">
        <div class="col-6">
            <Colosus.Client.Components.Button Text="Alacak Ekle" OnClick="()=> ShowTakeBox()"></Colosus.Client.Components.Button>
        </div>
        <div class="col-6">
            <Colosus.Client.Components.Button Text="Ödeme Ekle" OnClick="()=> ShowGiveBox()"></Colosus.Client.Components.Button>
        </div>
    </div>

    @if (debts != null && debts.Debts.Count > 0)
    {

        <table>
            <thead>
                <tr>
                    <th style="width:60px;">Tipi</th>
                    <th style="width:60px;">Durum</th>
                    <th>Oluşturulma Tarihi</th>
                    <th>Son Ödeme Tarihi</th>
                    <th>Miktar</th>
                    <th>Not</th>
                    <th style="max-width:60px;width:60px;">Sil</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in debts.Debts)
                {
                    <tr>
                        <td>@ConverTypeToString(item.Type)</td>
                        <td><Button Style="min-width:30px;width:30px;" OnClick="async ()=> await PayedOrNotPayed(item.PublicKey,item.Payed)" Icon="@ConvertPayedToString(item.Payed)"></Button></td>
                        <td>@item.CreateDate</td>
                        <td>@item.PayDate</td>
                        <td style="width:80px;min-width:80px;">@item.Price</td>
                        <td>@item.Note</td>
                        <td><Button Style="min-width:30px;width:30px;" Icon="fa fa-remove" OnClick="async ()=> await DeleteDebt(item.PublicKey)"></Button></td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="row">
            <div class="col-6">
                <Label>
                    Ödenmemiş Alacak : @debts.Debts.Where(xd => xd.Type == DebitType.Take && !xd.Payed).Select(xd => xd.Price).Sum()
                </Label>
            </div>
            <div class="col-6">
                <Label>
                    Ödenmiş Alacak : @debts.Debts.Where(xd => xd.Type == DebitType.Take && xd.Payed).Select(xd => xd.Price).Sum()
                </Label>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <Label>
                    Ödenmemiş Verecek : @debts.Debts.Where(xd => xd.Type == DebitType.Give && !xd.Payed).Select(xd => xd.Price).Sum()
                </Label>
            </div>
            <div class="col-6">
                <Label>
                    Ödenmiş Verecek : @debts.Debts.Where(xd => xd.Type == DebitType.Give && xd.Payed).Select(xd => xd.Price).Sum()
                </Label>
            </div>
        </div>
    }
    else if (debts != null && debts.Debts.Count == 0)
    {

        <p>Bu müşteriye hiç cari girilmemiş</p>

    }

</div>


<Colosus.Client.Components.CustomBox @ref="addTakeBox">
    <AddDebt @ref="addTake"
              CustomerPublicKey="@CustomerPublicKey.ToString()"
              Type="Entity.Concretes.DatabaseModel.DebitType.Take"
              CloseAction="new Task( async ()=>{ await CloseAndRefreshData(); })"></AddDebt>
</Colosus.Client.Components.CustomBox>


<Colosus.Client.Components.CustomBox @ref="addGiveBox">
    <AddDebt @ref="addGive"
              CustomerPublicKey="@CustomerPublicKey.ToString()"
              Type="Entity.Concretes.DatabaseModel.DebitType.Give"
              CloseAction="new Task( async ()=>{ await CloseAndRefreshData(); })"></AddDebt>
</Colosus.Client.Components.CustomBox>
@code {
    [Parameter] public string CustomerPublicKey { get; set; } = "";
    Colosus.Entity.Concretes.DTO.Debt debts = new();

    public string ConverTypeToString(DebitType type)
    {
        switch (type)
        {
            case DebitType.Take:
                return "⬇️";
            case DebitType.Give:
                return "⬆️";
            default:
                return null;
        }
    }

    public string ConvertPayedToString(bool payed)

    {
        if (payed) return "fa fa-check";
        else return "fa fa-close";
    }


    private CustomBox addTakeBox = new();
    private AddDebt addTake = new();


    private CustomBox addGiveBox = new();
    private AddDebt addGive = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();

    }

    public async Task RefreshData()
    {
        RequestResult result = await customerService.GetCustomerDebtsForCustomerPublicKey(CustomerPublicKey);
        if (result.Result == EnumRequestResult.Ok)
        {
            debts = dataConverter.Deserialize<Colosus.Entity.Concretes.DTO.Debt>(result.Data);
            StateHasChanged();
        }
        else
            AppState.AddMessage("Bir sorun meydana geldi.");
    }

    private async Task ShowTakeBox() =>
        addTakeBox.Show();

    private async Task ShowGiveBox() =>
    addGiveBox.Show();

    private async Task CloseAndRefreshData()
    {
        await RefreshData();
        addTakeBox.Close();
        addGiveBox.Close();
    }

    private async Task PayedOrNotPayed(string DebtItemPublicKey, bool payed)
    {
        RequestResult res = null;
        if (payed)
            res = await customerService.UnPaidDebt(DebtItemPublicKey);
        else
            res = await customerService.PayedDebt(DebtItemPublicKey);
        if (res.Result == EnumRequestResult.Ok)
            await RefreshData();
    }


    private async Task DeleteDebt(string DebtItemPublicKey)
    {
        RequestResult res = await customerService.DeleteDebt(DebtItemPublicKey);
        if (res.Result == EnumRequestResult.Ok)
            await RefreshData();
    }
}
