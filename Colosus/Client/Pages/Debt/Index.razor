@using Colosus.Client.Components
@using Colosus.Client.Services.Customer
@using Colosus.Entity.Concretes
@using Colosus.Entity.Concretes.DatabaseModel
@using Colosus.Operations.Abstracts
@inject ICustomerService customerService
@inject IDataConverter dataConverter
@page "/Debt/Index"
<div class="container">
    <div class="container-header">
        <h3>Cariler</h3>
    </div>


    @if (upCommingDebts != null && upCommingDebts.Count > 0)
    {

        <table>
            <thead>
                <tr>
                    <th style="width:60px;">Tipi</th>
                    <th style="width:60px;">Durum</th>
                    <th>Oluşturulma Tarihi</th>
                    <th>Son Ödeme Tarihi</th>
                    <th>Miktar</th>
                    <th>Not</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in upCommingDebts)
                {
                    <tr>
                        <td>@ConverTypeToString(item.Type)</td>
                        <td><Button Style="min-width:30px;width:30px;" OnClick="async ()=> await PayedOrNotPayed(item.PublicKey,item.Payed)" Icon="@AppState.ConvertBoolToIcon(item.Payed)"></Button></td>
                        <td>@item.PayDate</td>
                        <td style="width:80px;min-width:80px;">@item.Price</td>
                        <td>@item.Note</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="row">
            <div class="col-6">
                <Label>
                    Ödenmemiş Alacak : @upCommingDebts.Where(xd => xd.Type == Entity.Concretes.DatabaseModel.DebitType.Take && !xd.Payed).Select(xd => xd.Price).Sum()
                </Label>
            </div>
            <div class="col-6">
                <Label>
                    Ödenmiş Alacak : @upCommingDebts.Where(xd => xd.Type == Entity.Concretes.DatabaseModel.DebitType.Take && xd.Payed).Select(xd => xd.Price).Sum()
                </Label>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <Label>
                    Ödenmemiş Verecek : @upCommingDebts.Where(xd => xd.Type == Entity.Concretes.DatabaseModel.DebitType.Give && !xd.Payed).Select(xd => xd.Price).Sum()
                </Label>
            </div>
            <div class="col-6">
                <Label>
                    Ödenmiş Verecek : @upCommingDebts.Where(xd => xd.Type == Entity.Concretes.DatabaseModel.DebitType.Give && xd.Payed).Select(xd => xd.Price).Sum()
                </Label>
            </div>
        </div>
    }

</div>

@code {
    List<Colosus.Entity.Concretes.DTO.UpCommingDebtDTO> upCommingDebts = new();

    public string ConverTypeToString(DebitType type)
    {
        switch (type)
        {
            case DebitType.Take:
                return "⬇️";
            case DebitType.Give:
                return "⬆️";
            default:
                return null;
        }
    }

    private async Task PayedOrNotPayed(string DebtItemPublicKey, bool payed)
    {
        RequestResult res = null;
        if (payed)
            res = await customerService.UnPaidDebt(DebtItemPublicKey);
        else
            res = await customerService.PayedDebt(DebtItemPublicKey);
        if (res.Result == EnumRequestResult.Ok)
            await RefreshData();
    }

    public async Task RefreshData()
    {
        RequestResult result = await customerService.GetMyUpCommingDebt(AppState.SelectedFirmPublicKey);
        if (result != null)
            upCommingDebts = dataConverter.Deserialize<List<Colosus.Entity.Concretes.DTO.UpCommingDebtDTO>>(result.Data);
    }
}
