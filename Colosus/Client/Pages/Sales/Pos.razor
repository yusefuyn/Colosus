@page "/Sales/Pos/{musteriid}"
@inject ISaleService saleService
@inject IDataConverter dataConverter
@using Colosus.Client.Blazor.Services.Sale
@using Colosus.Entity.Concretes
@using Colosus.Entity.Concretes.DTO
@using Colosus.Entity.Concretes.RequestModel
@using Colosus.Operations.Abstracts
@if (posDTO != null)
{
    <div class="container h-100">
        <div class="row h-5">
            <div class="col-4">
                <h3>@posDTO.Customer.GetName()</h3>
            </div>
            <div class="col-2">
                <h3>Kategoriler</h3>
            </div>
            <div class="col-6">
                <h3>Ürünler</h3>
            </div>
        </div>
        <div class="row w-100 h-95">
            <div class="col-1">
                <button class="btn btn-info w-100">Grupla</button>
                <button class="btn btn-info w-100">Ürün Sil</button>
                <button class="btn btn-info w-100">Para Birimi</button>
            </div>
            <div class="col-3 h-100">
                <div class="row h-50">
                    <p>satılanlar</p>
                </div>
                <div class="row h-50">
                    <p>ödeme ayars</p>
                </div>
            </div>
            <div class="col-2 h-100">
                @if (posDTO.Categories != null && posDTO.Categories.Count > 0)
                {
                    @foreach (var item in posDTO.Categories)
                    {
                        <button style="margin:0px;" @onclick="()=>ListToProductWithSelectedCategory(item.PublicKey)" class="btn btn-success row w-100">@item.Name.ToString()</button>
                    }
                }
            </div>
            <div class="col-6 h-100">
                @if (SelectedCategoryProducts != null && SelectedCategoryProducts.Count > 0)
                {
                    @foreach (var item in SelectedCategoryProducts)
                    {
                        <button style="margin:5px 0px;" class="btn btn-success col-12">@item.Name.ToString()</button>
                    }
                }
            </div>
        </div>
    </div>

}
@code {
    public PosDTO posDTO = null;

    public List<ProductDTO> SelectedCategoryProducts { get; set; }

    [Parameter]
    public string musteriid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await saleService.GetMyPosDTO(new() { FirmPublicKey = AppState.SelectedFirmPublicKey, CustomerPublicKey = musteriid });
        if (result != null && result.Ok())
        {
            posDTO = result.Data;
            StateHasChanged();
        }
    }

    private void ListToProductWithSelectedCategory(string SelectedCategory)
    {
        SelectedCategoryProducts = posDTO.Products.Where(xd => xd.CategoryPublicKey == SelectedCategory).ToList();
    }

}
