@page "/PaymentType/Index"
@using Colosus.Client.Blazor.Services.Settings
@using Colosus.Entity.Concretes
@using Colosus.Operations.Abstracts
@inject ISettingsService settingsService
@inject NavigationManager navigationManager
@inject IDataConverter dataConverter
<div class="container">
    <div class="row">
        <Colosus.Client.Blazor.Components.Button Class="col-12"
                                          Text="Yeni Ekle"
                                          Style="height:40px;"
                                          OnClick='()=> navigationManager.NavigateTo("/PaymentType/Add")'></Colosus.Client.Blazor.Components.Button>
    </div>

    <div class="row">
        <div class="container-header">
            <h3>Önerilen Ödeme Tipleri</h3>
        </div>

        @if (RecommendedPaymentType != null && RecommendedPaymentType.Count > 0)
        {
            <table>
                <thead>
                    <tr>
                        <th>Adı </th>
                        <th>Resim Url'si</th>
                        <th>Ekle</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in RecommendedPaymentType)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.PictureUri</td>
                            @if (item.Added != true)
                            {
                                <td><Colosus.Client.Blazor.Components.Button Icon="fa fa-add" OnClick="async ()=> await AddRecommendedType(item.PublicKey)"></Colosus.Client.Blazor.Components.Button></td>
                            }
                            else
                            {
                                <td><Colosus.Client.Blazor.Components.Label>Eklenmiş.</Colosus.Client.Blazor.Components.Label></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>



    <div class="row">
        <div class="container-header">
            <h3>Ödeme Tipleriniz</h3>
        </div>

        @if (PaymentTypes != null && PaymentTypes.Count > 0)
        {
            <table>
                <thead>
                    <tr>
                        <th>Adı </th>
                        <th>Resim Url'si</th>
                        <th>Sil</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in PaymentTypes)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.PictureUri</td>
                            <td><Colosus.Client.Blazor.Components.Button Style="color:red;" Icon="fa fa-remove" OnClick="async ()=> await Delete(item.PublicKey)"></Colosus.Client.Blazor.Components.Button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>


</div>

@code {
    List<Colosus.Entity.Concretes.DTO.PaymentTypeDTO> PaymentTypes = new();
    List<Colosus.Entity.Concretes.DTO.PaymentTypeDTO> RecommendedPaymentType = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    public async Task Delete(string payTypePublicKey)
    {
        await settingsService.DeletePaymentType(new() { FirmPublicKey = AppState.SelectedFirmPublicKey, PaymentTypePublicKey = payTypePublicKey });
        await RefreshData();
    }

    public async Task RefreshData()
    {
        RequestResult res = await settingsService.GetAllPaymentTypeForFirmPublicKey(AppState.SelectedFirmPublicKey);
        if (res != null && res.Ok())
            PaymentTypes = dataConverter.Deserialize<List<Colosus.Entity.Concretes.DTO.PaymentTypeDTO>>(res.Data);
        else
            AppState.AddMessage("Bir hata meydana geldi.");

        RequestResult result = await settingsService.RecommendedPaymentType(AppState.SelectedFirmPublicKey);
        if (result != null && result.Ok())
            RecommendedPaymentType = dataConverter.Deserialize<List<Colosus.Entity.Concretes.DTO.PaymentTypeDTO>>(result.Data);
        else
            AppState.AddMessage("Bir hata meydana geldi.");


        PaymentTypes.ForEach(xd =>
        {
            var obj = RecommendedPaymentType.FirstOrDefault(dx => dx.PublicKey == xd.PublicKey);
            if (obj != null)
                obj.Added = true;
        });
    }

    public async Task AddRecommendedType(string PaymentType)
    {
        await settingsService.AddPaymentTypeRelation(new() { FirmPublicKey = AppState.SelectedFirmPublicKey, PaymentTypePublicKey = PaymentType });
        await RefreshData();
    }
}